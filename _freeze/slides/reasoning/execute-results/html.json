{
  "hash": "f38a0f213414fb5252bd90866af598e0",
  "result": {
    "markdown": "---\ntitle: \"Chain of Thought Reasoning\"\ntitle-slide-attributes:\n  data-background-image: ../images/logo.png\n  data-background-size: contain\n  data-background-opacity: \"0.5\"\nlang: en\nsubtitle: Tutorial 4\nauthor: Jan Kirenz\nexecute:\n  eval: true\n  echo: true\nhighlight-style: github\nformat:\n  revealjs: \n    toc: true\n    toc-depth: 1\n    embed-resources: false\n    theme: [dark, ../custom.scss]  \n    incremental: true\n    transition: slide\n    background-transition: fade\n    transition-speed: slow\n    code-copy: true\n    code-line-numbers: true\n    smaller: false\n    scrollable: true\n    slide-number: c\n    preview-links: auto\n    chalkboard: \n      buttons: false\n   # logo: ../images/logo.png\n    footer: Jan Kirenz\n---\n\n# Setup\n\n## Python\n\n::: {#8f34870c .cell execution_count=1}\n``` {.python .cell-code}\nimport os\nimport openai\nimport sys\nfrom dotenv import load_dotenv, find_dotenv\n_ = load_dotenv(find_dotenv())\n\nopenai.api_key = os.environ['OPENAI_API_KEY']\n```\n:::\n\n\n## Helper function\n\n::: {#f09c49d8 .cell execution_count=2}\n``` {.python .cell-code}\ndef get_completion_from_messages(messages,\n                                 model=\"gpt-3.5-turbo\",\n                                 temperature=0, max_tokens=500):\n    response = openai.ChatCompletion.create(\n        model=model,\n        messages=messages,\n        temperature=temperature,\n        max_tokens=max_tokens,\n    )\n    return response.choices[0].message[\"content\"]\n\n```\n:::\n\n\n# Chain-of-Thought Prompting 1\n\n## System message {.smaller}\n\n::: {#361fca63 .cell execution_count=3}\n``` {.python .cell-code}\ndelimiter = \"####\"\n\nsystem_message = f\"\"\"\nFollow these steps to answer the customer queries.\nThe customer query will be delimited with four hashtags,\\\ni.e. {delimiter}. \n\nStep 1:{delimiter} First decide whether the user is \\\nasking a question about a specific product or products. \\\nProduct cateogry doesn't count. \n\nStep 2:{delimiter} If the user is asking about \\\nspecific products, identify whether \\\nthe products are in the following list.\nAll available products: \n1. Product: TechPro Ultrabook\n   Category: Computers and Laptops\n   Brand: TechPro\n   Model Number: TP-UB100\n   Warranty: 1 year\n   Rating: 4.5\n   Features: 13.3-inch display, 8GB RAM, 256GB SSD, Intel Core i5 processor\n   Description: A sleek and lightweight ultrabook for everyday use.\n   Price: $799.99\n\n2. Product: BlueWave Gaming Laptop\n   Category: Computers and Laptops\n   Brand: BlueWave\n   Model Number: BW-GL200\n   Warranty: 2 years\n   Rating: 4.7\n   Features: 15.6-inch display, 16GB RAM, 512GB SSD, NVIDIA GeForce RTX 3060\n   Description: A high-performance gaming laptop for an immersive experience.\n   Price: $1199.99\n\n3. Product: PowerLite Convertible\n   Category: Computers and Laptops\n   Brand: PowerLite\n   Model Number: PL-CV300\n   Warranty: 1 year\n   Rating: 4.3\n   Features: 14-inch touchscreen, 8GB RAM, 256GB SSD, 360-degree hinge\n   Description: A versatile convertible laptop with a responsive touchscreen.\n   Price: $699.99\n\n4. Product: TechPro Desktop\n   Category: Computers and Laptops\n   Brand: TechPro\n   Model Number: TP-DT500\n   Warranty: 1 year\n   Rating: 4.4\n   Features: Intel Core i7 processor, 16GB RAM, 1TB HDD, NVIDIA GeForce GTX 1660\n   Description: A powerful desktop computer for work and play.\n   Price: $999.99\n\n5. Product: BlueWave Chromebook\n   Category: Computers and Laptops\n   Brand: BlueWave\n   Model Number: BW-CB100\n   Warranty: 1 year\n   Rating: 4.1\n   Features: 11.6-inch display, 4GB RAM, 32GB eMMC, Chrome OS\n   Description: A compact and affordable Chromebook for everyday tasks.\n   Price: $249.99\n\nStep 3:{delimiter} If the message contains products \\\nin the list above, list any assumptions that the \\\nuser is making in their \\\nmessage e.g. that Laptop X is bigger than \\\nLaptop Y, or that Laptop Z has a 2 year warranty.\n\nStep 4:{delimiter}: If the user made any assumptions, \\\nfigure out whether the assumption is true based on your \\\nproduct information. \n\nStep 5:{delimiter}: First, politely correct the \\\ncustomer's incorrect assumptions if applicable. \\\nOnly mention or reference products in the list of \\\n5 available products, as these are the only 5 \\\nproducts that the store sells. \\\nAnswer the customer in a friendly tone.\n\nUse the following format:\nStep 1:{delimiter} <step 1 reasoning>\nStep 2:{delimiter} <step 2 reasoning>\nStep 3:{delimiter} <step 3 reasoning>\nStep 4:{delimiter} <step 4 reasoning>\nResponse to user:{delimiter} <response to customer>\n\nMake sure to include {delimiter} to separate every step.\n\"\"\"\n```\n:::\n\n\n## User message\n\n::: {#90810aab .cell execution_count=4}\n``` {.python .cell-code}\nuser_message = f\"\"\"\nby how much is the BlueWave Chromebook more expensive \\\nthan the TechPro Desktop\"\"\"\n```\n:::\n\n\n. . .\n\n::: {#6a347e0d .cell execution_count=5}\n``` {.python .cell-code}\nmessages = [\n    {'role': 'system',\n     'content': system_message},\n    {'role': 'user',\n     'content': f\"{delimiter}{user_message}{delimiter}\"},\n]\n```\n:::\n\n\n## Response\n\n::: {#a27080e3 .cell output-location='fragment' execution_count=6}\n``` {.python .cell-code}\nresponse = get_completion_from_messages(messages)\nprint(response)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nStep 1:#### The user is asking about the price difference between the BlueWave Chromebook and the TechPro Desktop.\n\nStep 2:#### Both the BlueWave Chromebook and the TechPro Desktop are available products.\n\nStep 3:#### The user assumes that the BlueWave Chromebook is more expensive than the TechPro Desktop.\n\nStep 4:#### Based on the product information, the price of the BlueWave Chromebook is $249.99, and the price of the TechPro Desktop is $999.99. Therefore, the TechPro Desktop is actually more expensive than the BlueWave Chromebook.\n\nResponse to user:#### The BlueWave Chromebook is actually less expensive than the TechPro Desktop. The BlueWave Chromebook is priced at $249.99, while the TechPro Desktop is priced at $999.99.\n```\n:::\n:::\n\n\n# Chain-of-Thought Prompting 2\n\n## User message\n\n::: {#baf0bede .cell execution_count=7}\n``` {.python .cell-code}\nuser_message = f\"\"\"\ndo you sell tvs\"\"\"\n```\n:::\n\n\n. . .\n\n::: {#f64c148a .cell execution_count=8}\n``` {.python .cell-code}\nmessages = [\n    {'role': 'system',\n     'content': system_message},\n    {'role': 'user',\n     'content': f\"{delimiter}{user_message}{delimiter}\"},\n]\n```\n:::\n\n\n## Response\n\n::: {#739e435c .cell output-location='fragment' execution_count=9}\n``` {.python .cell-code}\nresponse = get_completion_from_messages(messages)\nprint(response)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nStep 1:#### The user is asking if the store sells TVs, which is a question about a specific product category.\n\nStep 2:#### TVs are not included in the list of available products. The store only sells computers and laptops.\n\nResponse to user:#### I'm sorry, but we currently do not sell TVs. Our store specializes in computers and laptops. If you have any questions or need assistance with our available products, feel free to ask.\n```\n:::\n:::\n\n\n## Inner Monologue\n\n- Since we asked the LLM to separate its reasoning steps by a delimiter, we can hide the chain-of-thought reasoning from the final output that the user sees.\n\n::: {#c6d60f9e .cell output-location='fragment' execution_count=10}\n``` {.python .cell-code}\ntry:\n    final_response = response.split(delimiter)[-1].strip()\nexcept Exception as e:\n    final_response = \"Sorry, I'm having trouble right now, please try asking another question.\"\n\nprint(final_response)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nI'm sorry, but we currently do not sell TVs. Our store specializes in computers and laptops. If you have any questions or need assistance with our available products, feel free to ask.\n```\n:::\n:::\n\n\n# What's next? {background-image=\"../images/logo.png\" background-opacity=\"0.5\"}\n\n- **Congratulations! You have completed this tutorial** üëç\n\n- **Next, you may want to go back to the [lab's website](https://kirenz.github.io/lab-chat-system/)**\n\n",
    "supporting": [
      "reasoning_files"
    ],
    "filters": [],
    "includes": {}
  }
}