{
  "hash": "74df63966184eba88952fee8fce59350",
  "result": {
    "markdown": "---\ntitle: Chat Format and Tokens\nlang: en\nsubtitle: Tutorial 1\nauthor: Jan Kirenz\nexecute:\n  eval: true\n  echo: true\nhighlight-style: github\nformat:\n  revealjs: \n    toc: true\n    toc-depth: 1\n    embed-resources: false\n    theme: [dark, ../custom.scss]  \n    incremental: true\n    transition: slide\n    background-transition: fade\n    transition-speed: slow\n    code-copy: true\n    code-line-numbers: true\n    smaller: false\n    scrollable: true\n    slide-number: c\n    preview-links: auto\n    chalkboard: \n      buttons: false\n   #logo: images/logo.png\n    footer: Jan Kirenz\n---\n\n# Setup\n\n## Python\n\n::: {#1bdda99d .cell execution_count=1}\n``` {.python .cell-code}\nimport os\nimport openai\nimport tiktoken\nfrom dotenv import load_dotenv, find_dotenv\n_ = load_dotenv(find_dotenv())  # read local .env file\n\nopenai.api_key = os.environ['OPENAI_API_KEY']\n```\n:::\n\n\n## Helper function\n\n::: {#64670aa9 .cell execution_count=2}\n``` {.python .cell-code}\ndef get_completion(prompt, model=\"gpt-3.5-turbo\"):\n    messages = [{\"role\": \"user\", \"content\": prompt}]\n    response = openai.ChatCompletion.create(\n        model=model,\n        messages=messages,\n        temperature=0,\n    )\n    return response.choices[0].message[\"content\"]\n\n```\n:::\n\n\n# Basic Language Model\n\n## Standard completion\n\n- Prompt the model and get a completion\n\n::: {#b548d7d6 .cell execution_count=3}\n``` {.python .cell-code}\nresponse = get_completion(\"What is the capital of France?\")\n```\n:::\n\n\n. . .\n\n::: {#6d34c471 .cell output-location='fragment' execution_count=4}\n``` {.python .cell-code}\nprint(response)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe capital of France is Paris.\n```\n:::\n:::\n\n\n## Tokens\n\n::: {#037eebc0 .cell output-location='fragment' execution_count=5}\n``` {.python .cell-code}\nresponse = get_completion(\"Take the letters in lollipop \\\nand reverse them\")\nprint(response)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe reversed letters of \"lollipop\" are \"pillipol\".\n```\n:::\n:::\n\n\n- \"lollipop\" in reverse should be \"popillol\"\n\n## Explicit tokens\n\n::: {#286e56fd .cell output-location='fragment' execution_count=6}\n``` {.python .cell-code}\nresponse = get_completion(\"\"\"Take the letters in \\\nl-o-l-l-i-p-o-p and reverse them\"\"\")\n```\n:::\n\n\n. . .\n\n::: {#afcfd240 .cell output-location='fragment' execution_count=7}\n``` {.python .cell-code}\nresponse\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\n'p-o-p-i-l-l-o-l'\n```\n:::\n:::\n\n\n# Chat Format\n\n## Helper function (chat format)\n\n- Helper function for chat format\n\n::: {#e5a0c08c .cell execution_count=8}\n``` {.python .cell-code}\ndef get_completion_from_messages(messages,\n                                 model=\"gpt-3.5-turbo\",\n                                 temperature=0,\n                                 max_tokens=500):\n    response = openai.ChatCompletion.create(\n        model=model,\n        messages=messages,\n        temperature=temperature,  # this is the degree of randomness of the model's output\n        max_tokens=max_tokens,  # the maximum number of tokens the model can ouptut\n    )\n    return response.choices[0].message[\"content\"]\n\n```\n:::\n\n\n## Message example Sokrates\n\n::: {#a9f4e517 .cell execution_count=9}\n``` {.python .cell-code}\nmessages = [\n    {'role': 'system',  # overall tone/behavior of assistant\n     'content': \"\"\"You are an assistant who\\\n responds in the style of Sokrates.\"\"\"},\n    {'role': 'user',\n        'content': \"\"\"write me a very short poem\\\n about a happy student at Hochschule der Medien Stuttgart \"\"\"},\n]\n```\n:::\n\n\n## Response\n\n::: {#2ceab415 .cell output-location='fragment' execution_count=10}\n``` {.python .cell-code}\nresponse = get_completion_from_messages(messages, temperature=1)\nprint(response)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAh, dear inquirer, permit me to oblige,\nWith words that may embrace a happy student's stride.\nIn Hochschule der Medien Stuttgart, a student thrives,\nWith joyous heart and knowledge that soars in skies.\n\nAmidst the halls, where books and stories reside,\nA seeker of wisdom, with grateful eyes wide,\nBends to learn, with fervor and delight,\nThe student's soul dances, set aglow in the night.\n\nWith words of professors, a guiding light,\nIntellect's waters quench a thirst, burning bright.\nThe hum of discussions, debates that arise,\nExpands the mind, amidst the student's ties.\n\nA canvas of dreams, where creativity weaves,\nEach stroke, each line, a passion he believes.\nDesign, artistry, innovation takes flight,\nAnd in the student's heart, joy reaches its height.\n\nOh, the friendships formed within these walls,\nKindred spirits, together, answer the calls,\nThrough laughter and support, shoulders entwined,\nA network of care, a love that's aligned.\n\nDear student at Hochschule der Medien Stuttgart,\nIn your happiness, let knowledge take root,\nMay learning and joy forever unite,\nFor you are blessed, under education's light.\n```\n:::\n:::\n\n\n## Message example one sentence\n\n::: {#01ca9565 .cell execution_count=11}\n``` {.python .cell-code}\nmessages = [\n    {'role': 'system',\n     'content': 'All your responses must be \\\none sentence long.'},\n    {'role': 'user',\n     'content': 'write me a very short poem\\\n about a happy student at Hochschule der Medien Stuttgart'},\n]\n```\n:::\n\n\n## Response\n\n::: {#aeba7ebc .cell output-location='fragment' execution_count=12}\n``` {.python .cell-code}\nresponse = get_completion_from_messages(messages, temperature=1)\nprint(response)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nA student's joy, learning and growing at HdM Stuttgart.\n```\n:::\n:::\n\n\n## Message example Sokrates, one sentence\n\n::: {#7bc4a37e .cell output-location='fragment' execution_count=13}\n``` {.python .cell-code}\n# combined\nmessages = [\n    {'role': 'system',\n     'content': \"\"\"You are an assistant who \\\nresponds in the style of Sokrates. \\\nAll your responses must be one sentence long.\"\"\"},\n    {'role': 'user',\n     'content': \"\"\"write me a story about a happy carrot\"\"\"},\n]\n```\n:::\n\n\n## Response\n\n::: {#a05b4b6b .cell output-location='fragment' execution_count=14}\n``` {.python .cell-code}\nresponse = get_completion_from_messages(messages, temperature=1)\nprint(response)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAh, the happy carrot, a symbol of contentment and nourishment.\n```\n:::\n:::\n\n\n# Token Count\n\n## Helper function {.smaller}\n\n- Show how many tokens you are using\n\n::: {#fd314ec8 .cell execution_count=15}\n``` {.python .cell-code}\ndef get_completion_and_token_count(messages,\n                                   model=\"gpt-3.5-turbo\",\n                                   temperature=0,\n                                   max_tokens=500):\n\n    response = openai.ChatCompletion.create(\n        model=model,\n        messages=messages,\n        temperature=temperature,\n        max_tokens=max_tokens,\n    )\n\n    content = response.choices[0].message[\"content\"]\n\n    token_dict = {\n        'prompt_tokens': response['usage']['prompt_tokens'],\n        'completion_tokens': response['usage']['completion_tokens'],\n        'total_tokens': response['usage']['total_tokens'],\n    }\n\n    return content, token_dict\n\n```\n:::\n\n\n## Example message\n\n::: {#8eb4918b .cell execution_count=16}\n``` {.python .cell-code}\nmessages = [\n    {'role': 'system',  # overall tone/behavior of assistant\n     'content': \"\"\"You are an assistant who\\\n responds in the style of Sokrates.\"\"\"},\n    {'role': 'user',\n        'content': \"\"\"write me a very short poem\\\n about a happy student at Hochschule der Medien Stuttgart \"\"\"},\n]\n\nresponse, token_dict = get_completion_and_token_count(messages)\n```\n:::\n\n\n## Response \n\n::: {#c3f61330 .cell output-location='fragment' execution_count=17}\n``` {.python .cell-code}\nprint(response)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nOh, a student at Hochschule der Medien Stuttgart,\nWith joy in their heart, their passion unfurled.\nIn lectures they learn, their minds ever bright,\nSeeking knowledge, embracing the light.\n\nAmongst fellow scholars, they find their place,\nSharing ideas, with smiles on their face.\nIn libraries they delve, books as their guide,\nExpanding horizons, with each page they stride.\n\nWith professors as mentors, wise and kind,\nThey nurture their dreams, their ambitions aligned.\nIn labs and studios, they create and explore,\nUnleashing their talents, forever wanting more.\n\nOh, a happy student, their spirit so high,\nAt Hochschule der Medien, they reach for the sky.\nWith every challenge, they grow and they thrive,\nIn this vibrant community, they truly come alive.\n```\n:::\n:::\n\n\n. . .\n\n::: {#800b9f59 .cell output-location='fragment' execution_count=18}\n``` {.python .cell-code}\nprint(token_dict)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{'prompt_tokens': 43, 'completion_tokens': 166, 'total_tokens': 209}\n```\n:::\n:::\n\n\n",
    "supporting": [
      "basics_files"
    ],
    "filters": [],
    "includes": {}
  }
}