{
  "hash": "b599853ceb65ee00708ebaae48c32932",
  "result": {
    "markdown": "---\ntitle: Chat Format and Tokens\ntitle-slide-attributes:\n  data-background-image: ../images/logo.png\n  data-background-size: contain\n  data-background-opacity: \"0.5\"\nlang: en\nsubtitle: Tutorial 1\nauthor: Jan Kirenz\nexecute:\n  eval: false\n  echo: true\nhighlight-style: github\nformat:\n  revealjs: \n    toc: true\n    toc-depth: 1\n    embed-resources: false\n    theme: [dark, ../custom.scss]  \n    incremental: false\n    transition: slide\n    background-transition: fade\n    transition-speed: slow\n    code-copy: true\n    code-line-numbers: true\n    smaller: false\n    scrollable: true\n    slide-number: c\n    preview-links: auto\n    chalkboard: \n      buttons: false\n   # logo: ../images/logo.png\n    footer: Jan Kirenz\n---\n\n# Setup\n\n## Python\n\n::: {#2da9d439 .cell execution_count=1}\n``` {.python .cell-code}\nimport os\nimport openai\nimport tiktoken\nfrom dotenv import load_dotenv, find_dotenv\n_ = load_dotenv(find_dotenv())  # read local .env file\n\nopenai.api_key = os.environ['OPENAI_API_KEY']\n```\n:::\n\n\n## Helper function\n\n::: {#c9f396d3 .cell execution_count=2}\n``` {.python .cell-code}\ndef get_completion(prompt, model=\"gpt-3.5-turbo\"):\n    messages = [{\"role\": \"user\", \"content\": prompt}]\n    response = openai.ChatCompletion.create(\n        model=model,\n        messages=messages,\n        temperature=0,\n    )\n    return response.choices[0].message[\"content\"]\n\n```\n:::\n\n\n# Basic Completion\n\n## Example prompt\n\n- Prompt the model and get a completion\n\n::: {#122a0ed3 .cell execution_count=3}\n``` {.python .cell-code}\nresponse = get_completion(\"What is the capital of Germany?\")\n```\n:::\n\n\n. . .\n\n::: {#780b8bc3 .cell output-location='fragment' execution_count=4}\n``` {.python .cell-code}\nprint(response)\n```\n:::\n\n\n## Tokens\n\n::: {#061eb7a5 .cell output-location='fragment' execution_count=5}\n``` {.python .cell-code}\nresponse = get_completion(\"Take the letters in lollipop \\\nand reverse them\")\nprint(response)\n```\n:::\n\n\n- \"lollipop\" in reverse should be \"popillol\"\n\n## Explicit tokens\n\n::: {#9cc1aa8b .cell output-location='fragment' execution_count=6}\n``` {.python .cell-code}\nresponse = get_completion(\"\"\"Take the letters in \\\nl-o-l-l-i-p-o-p and reverse them\"\"\")\n```\n:::\n\n\n. . .\n\n::: {#c0cfd84b .cell output-location='fragment' execution_count=7}\n``` {.python .cell-code}\nresponse\n```\n:::\n\n\n# Chat Format\n\n## Helper function (chat format)\n\n- Helper function for chat format\n\n::: {#f7034048 .cell execution_count=8}\n``` {.python .cell-code}\ndef get_completion_from_messages(messages,\n                                 model=\"gpt-3.5-turbo\",\n                                 temperature=0,\n                                 max_tokens=500):\n    response = openai.ChatCompletion.create(\n        model=model,\n        messages=messages,\n        temperature=temperature,  # this is the degree of randomness of the model's output\n        max_tokens=max_tokens,  # the maximum number of tokens the model can ouptut\n    )\n    return response.choices[0].message[\"content\"]\n\n```\n:::\n\n\n## Message example Sokrates\n\n::: {#1bab9b5a .cell execution_count=9}\n``` {.python .cell-code}\nmessages = [\n    {'role': 'system',  # overall tone/behavior of assistant\n     'content': \"\"\"You are an assistant who\\\n responds in the style of Sokrates.\"\"\"},\n    {'role': 'user',\n        'content': \"\"\"write me a very short poem\\\n about a happy student at Hochschule der Medien Stuttgart \"\"\"},\n]\n```\n:::\n\n\n## Response\n\n::: {#49195ba1 .cell output-location='fragment' execution_count=10}\n``` {.python .cell-code}\nresponse = get_completion_from_messages(messages, temperature=1)\nprint(response)\n```\n:::\n\n\n## Message example one sentence\n\n::: {#0bff9535 .cell execution_count=11}\n``` {.python .cell-code}\nmessages = [\n    {'role': 'system',\n     'content': 'All your responses must be \\\none sentence long.'},\n    {'role': 'user',\n     'content': 'write me a very short poem\\\n about a happy student at Hochschule der Medien Stuttgart'},\n]\n```\n:::\n\n\n## Response\n\n::: {#860392d8 .cell output-location='fragment' execution_count=12}\n``` {.python .cell-code}\nresponse = get_completion_from_messages(messages, temperature=1)\nprint(response)\n```\n:::\n\n\n## Message example Sokrates, one sentence\n\n::: {#588b080c .cell output-location='fragment' execution_count=13}\n``` {.python .cell-code}\n# combined\nmessages = [\n    {'role': 'system',\n     'content': \"\"\"You are an assistant who \\\nresponds in the style of Sokrates. \\\nAll your responses must be one sentence long.\"\"\"},\n    {'role': 'user',\n     'content': \"\"\"write me a very short poem\\\n about a happy student at Hochschule der Medien Stuttgart\"\"\"},\n]\n```\n:::\n\n\n## Response\n\n::: {#0333ecd0 .cell output-location='fragment' execution_count=14}\n``` {.python .cell-code}\nresponse = get_completion_from_messages(messages, temperature=1)\nprint(response)\n```\n:::\n\n\n# Token Count\n\n## Helper function {.smaller}\n\n- Show how many tokens you are using\n\n::: {#342306ad .cell execution_count=15}\n``` {.python .cell-code}\ndef get_completion_and_token_count(messages,\n                                   model=\"gpt-3.5-turbo\",\n                                   temperature=0,\n                                   max_tokens=500):\n\n    response = openai.ChatCompletion.create(\n        model=model,\n        messages=messages,\n        temperature=temperature,\n        max_tokens=max_tokens,\n    )\n\n    content = response.choices[0].message[\"content\"]\n\n    token_dict = {\n        'prompt_tokens': response['usage']['prompt_tokens'],\n        'completion_tokens': response['usage']['completion_tokens'],\n        'total_tokens': response['usage']['total_tokens'],\n    }\n\n    return content, token_dict\n\n```\n:::\n\n\n## Example prompt\n\n::: {#7f0f05ef .cell execution_count=16}\n``` {.python .cell-code}\nmessages = [\n    {'role': 'system',  # overall tone/behavior of assistant\n     'content': \"\"\"You are an assistant who\\\n responds in the style of Sokrates.\"\"\"},\n    {'role': 'user',\n        'content': \"\"\"write me a very short poem\\\n about a happy student at Hochschule der Medien Stuttgart \"\"\"},\n]\n\nresponse, token_dict = get_completion_and_token_count(messages)\n```\n:::\n\n\n## Response \n\n::: {#21b8908c .cell output-location='fragment' execution_count=17}\n``` {.python .cell-code}\nprint(response)\n```\n:::\n\n\n## Token count\n\n::: {#f15b6831 .cell output-location='fragment' execution_count=18}\n``` {.python .cell-code}\nprint(token_dict)\n```\n:::\n\n\n# What's next? {background-image=\"../images/logo.png\" background-opacity=\"0.5\"}\n\n- **Congratulations! You have completed this tutorial** üëç\n\n- **Next, you may want to go back to the [lab's website](/index.qmd)**\n\n",
    "supporting": [
      "basics_files"
    ],
    "filters": [],
    "includes": {}
  }
}