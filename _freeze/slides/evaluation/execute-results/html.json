{
  "hash": "3ca705d502f45d93f2064e2ccd071022",
  "result": {
    "markdown": "---\ntitle: \"Evaluation for One Right Answer\"\ntitle-slide-attributes:\n  data-background-image: ../images/logo.png\n  data-background-size: contain\n  data-background-opacity: \"0.5\"\nlang: en\nsubtitle: Tutorial 8\nauthor: Jan Kirenz\nexecute:\n  eval: true\n  echo: true\nhighlight-style: github\nformat:\n  revealjs: \n    toc: true\n    toc-depth: 1\n    embed-resources: false\n    theme: [dark, ../custom.scss]  \n    incremental: false\n    transition: slide\n    background-transition: fade\n    transition-speed: slow\n    code-copy: true\n    code-line-numbers: true\n    smaller: false\n    scrollable: true\n    slide-number: c\n    preview-links: auto\n    chalkboard: \n      buttons: false\n   # logo: ../images/logo.png\n    footer: Jan Kirenz\n---\n\n# Setup\n\n## Python\n\n::: {#d57e6bf3 .cell execution_count=1}\n``` {.python .cell-code}\nimport json\nimport os\nimport openai\n# import sys\n# sys.path.append('../..')\nimport utils_2\nfrom dotenv import load_dotenv, find_dotenv\n_ = load_dotenv(find_dotenv())  # read local .env file\n\nopenai.api_key = os.environ['OPENAI_API_KEY']\n```\n:::\n\n\n## Helper function\n\n::: {#04829458 .cell execution_count=2}\n``` {.python .cell-code}\ndef get_completion_from_messages(messages, model=\"gpt-3.5-turbo\", temperature=0, max_tokens=500):\n    response = openai.ChatCompletion.create(\n        model=model,\n        messages=messages,\n        temperature=temperature,\n        max_tokens=max_tokens,\n    )\n    return response.choices[0].message[\"content\"]\n\n```\n:::\n\n\n# Product catalog\n\n## Products and categories {.smaller}\n\nList of products and categories that are in the product catalog.\n\n::: {#9b59461d .cell execution_count=3}\n``` {.python .cell-code}\nproducts_and_category = {'Computers and Laptops': ['TechPro Ultrabook',\n                                                   'BlueWave Gaming Laptop',\n                                                   'PowerLite Convertible',\n                                                   'TechPro Desktop',\n                                                   'BlueWave Chromebook'],\n                         'Smartphones and Accessories': ['SmartX ProPhone',\n                                                         'MobiTech PowerCase',\n                                                         'SmartX MiniPhone',\n                                                         'MobiTech Wireless Charger',\n                                                         'SmartX EarBuds'],\n                         'Televisions and Home Theater Systems': ['CineView 4K TV',\n                                                                  'SoundMax Home Theater',\n                                                                  'CineView 8K TV',\n                                                                  'SoundMax Soundbar',\n                                                                  'CineView OLED TV'],\n                         'Gaming Consoles and Accessories': ['GameSphere X',\n                                                             'ProGamer Controller',\n                                                             'GameSphere Y',\n                                                             'ProGamer Racing Wheel',\n                                                             'GameSphere VR Headset'],\n                         'Audio Equipment': ['AudioPhonic Noise-Canceling Headphones',\n                                             'WaveSound Bluetooth Speaker',\n                                             'AudioPhonic True Wireless Earbuds',\n                                             'WaveSound Soundbar',\n                                             'AudioPhonic Turntable'],\n                         'Cameras and Camcorders': ['FotoSnap DSLR Camera',\n                                                    'ActionCam 4K',\n                                                    'FotoSnap Mirrorless Camera',\n                                                    'ZoomMaster Camcorder',\n                                                    'FotoSnap Instant Camera']}\n```\n:::\n\n\n## Find product and category names (V1)\n\nThis could be the version that is running in production.\n\n::: {#e8204350 .cell execution_count=4}\n``` {.python .cell-code}\ndef find_category_and_product_v1(user_input, products_and_category):\n\n    delimiter = \"####\"\n    system_message = f\"\"\"\n    You will be provided with customer service queries. \\\n    The customer service query will be delimited with {delimiter} characters.\n    Output a python list of json objects, where each object has the following format:\n        'category': <one of Computers and Laptops, Smartphones and Accessories, Televisions and Home Theater Systems, \\\n    Gaming Consoles and Accessories, Audio Equipment, Cameras and Camcorders>,\n    AND\n        'products': <a list of products that must be found in the allowed products below>\n\n\n    Where the categories and products must be found in the customer service query.\n    If a product is mentioned, it must be associated with the correct category in the allowed products list below.\n    If no products or categories are found, output an empty list.\n    \n\n    List out all products that are relevant to the customer service query based on how closely it relates\n    to the product name and product category.\n    Do not assume, from the name of the product, any features or attributes such as relative quality or price.\n\n    The allowed products are provided in JSON format.\n    The keys of each item represent the category.\n    The values of each item is a list of products that are within that category.\n    Allowed products: {products_and_category}\n    \n\n    \"\"\"\n\n    few_shot_user_1 = \"\"\"I want the most expensive computer.\"\"\"\n    few_shot_assistant_1 = \"\"\" \n    [{'category': 'Computers and Laptops', \\\n'products': ['TechPro Ultrabook', 'BlueWave Gaming Laptop', 'PowerLite Convertible', 'TechPro Desktop', 'BlueWave Chromebook']}]\n    \"\"\"\n\n    messages = [\n        {'role': 'system', 'content': system_message},\n        {'role': 'user', 'content': f\"{delimiter}{few_shot_user_1}{delimiter}\"},\n        {'role': 'assistant', 'content': few_shot_assistant_1},\n        {'role': 'user', 'content': f\"{delimiter}{user_input}{delimiter}\"},\n    ]\n    return get_completion_from_messages(messages)\n\n```\n:::\n\n\n# Evaluation\n\n## Evaluation 0\n\n::: {#ee719329 .cell output-location='fragment' execution_count=5}\n``` {.python .cell-code}\ncustomer_msg_0 = f\"\"\"Which TV can I buy if I'm on a budget?\"\"\"\n\nproducts_by_category_0 = find_category_and_product_v1(customer_msg_0,\n                                                      products_and_category)\nprint(products_by_category_0)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n \n    [{'category': 'Televisions and Home Theater Systems', 'products': ['CineView 4K TV', 'SoundMax Home Theater', 'CineView 8K TV', 'SoundMax Soundbar', 'CineView OLED TV']}]\n```\n:::\n:::\n\n\n## Evaluation 1\n\n::: {#d7fdd275 .cell output-location='fragment' execution_count=6}\n``` {.python .cell-code}\ncustomer_msg_1 = f\"\"\"I need a charger for my smartphone\"\"\"\n\nproducts_by_category_1 = find_category_and_product_v1(customer_msg_1,\n                                                      products_and_category)\nprint(products_by_category_1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n \n    [{'category': 'Smartphones and Accessories', 'products': ['MobiTech PowerCase', 'MobiTech Wireless Charger', 'SmartX EarBuds']}]\n    \n```\n:::\n:::\n\n\n## Evaluation 2\n\n::: {#b20c0c95 .cell output-location='fragment' execution_count=7}\n``` {.python .cell-code}\ncustomer_msg_2 = f\"\"\"\nWhat computers do you have?\"\"\"\n\nproducts_by_category_2 = find_category_and_product_v1(customer_msg_2,\n                                                      products_and_category)\nproducts_by_category_2\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\n\" \\n    [{'category': 'Computers and Laptops', 'products': ['TechPro Ultrabook', 'BlueWave Gaming Laptop', 'PowerLite Convertible', 'TechPro Desktop', 'BlueWave Chromebook']}]\"\n```\n:::\n:::\n\n\n## Evaluation 3\n\n::: {#f6b0a5de .cell output-location='fragment' execution_count=8}\n``` {.python .cell-code}\ncustomer_msg_3 = f\"\"\"\ntell me about the smartx pro phone and the fotosnap camera, the dslr one.\nAlso, what TVs do you have?\"\"\"\n\nproducts_by_category_3 = find_category_and_product_v1(customer_msg_3,\n                                                      products_and_category)\nprint(products_by_category_3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n \n    [{'category': 'Smartphones and Accessories', 'products': ['SmartX ProPhone']}, {'category': 'Cameras and Camcorders', 'products': ['FotoSnap DSLR Camera']}, {'category': 'Televisions and Home Theater Systems', 'products': ['CineView 4K TV', 'SoundMax Home Theater', 'CineView 8K TV', 'SoundMax Soundbar', 'CineView OLED TV']}]\n```\n:::\n:::\n\n\n# Harder Test Case\n\nIdentify queries found in production, where the model is not working as expected.\n\n## Evaluation 4\n\n::: {#ac31e790 .cell output-location='fragment' execution_count=9}\n``` {.python .cell-code}\ncustomer_msg_4 = f\"\"\"\ntell me about the CineView TV, the 8K one, Gamesphere console, the X one.\nI'm on a budget, what computers do you have?\"\"\"\n\nproducts_by_category_4 = find_category_and_product_v1(customer_msg_4,\n                                                      products_and_category)\nprint(products_by_category_4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n \n    [{'category': 'Televisions and Home Theater Systems', 'products': ['CineView 4K TV', 'CineView 8K TV']}]\n    [{'category': 'Gaming Consoles and Accessories', 'products': ['GameSphere X']}]\n    [{'category': 'Computers and Laptops', 'products': ['TechPro Ultrabook', 'BlueWave Gaming Laptop', 'PowerLite Convertible', 'TechPro Desktop', 'BlueWave Chromebook']}]\n```\n:::\n:::\n\n\n# Modify Prompt (V2)\n\n## Find product and category names (V2) {.smaller}\n\nModify the prompt to work on the hard test cases\n\n::: {#6bf09684 .cell execution_count=10}\n``` {.python .cell-code}\ndef find_category_and_product_v2(user_input, products_and_category):\n    \"\"\"\n    Added: Do not output any additional text that is not in JSON format.\n    Added a second example (for few-shot prompting) where user asks for \n    the cheapest computer. In both few-shot examples, the shown response \n    is the full list of products in JSON only.\n    \"\"\"\n    delimiter = \"####\"\n    system_message = f\"\"\"\n    You will be provided with customer service queries. \\\n    The customer service query will be delimited with {delimiter} characters.\n    Output a python list of json objects, where each object has the following format:\n        'category': <one of Computers and Laptops, Smartphones and Accessories, Televisions and Home Theater Systems, \\\n    Gaming Consoles and Accessories, Audio Equipment, Cameras and Camcorders>,\n    AND\n        'products': <a list of products that must be found in the allowed products below>\n    Do not output any additional text that is not in JSON format.\n    Do not write any explanatory text after outputting the requested JSON.\n\n\n    Where the categories and products must be found in the customer service query.\n    If a product is mentioned, it must be associated with the correct category in the allowed products list below.\n    If no products or categories are found, output an empty list.\n    \n\n    List out all products that are relevant to the customer service query based on how closely it relates\n    to the product name and product category.\n    Do not assume, from the name of the product, any features or attributes such as relative quality or price.\n\n    The allowed products are provided in JSON format.\n    The keys of each item represent the category.\n    The values of each item is a list of products that are within that category.\n    Allowed products: {products_and_category}\n    \n\n    \"\"\"\n\n    few_shot_user_1 = \"\"\"I want the most expensive computer. What do you recommend?\"\"\"\n    few_shot_assistant_1 = \"\"\" \n    [{'category': 'Computers and Laptops', \\\n'products': ['TechPro Ultrabook', 'BlueWave Gaming Laptop', 'PowerLite Convertible', 'TechPro Desktop', 'BlueWave Chromebook']}]\n    \"\"\"\n\n    few_shot_user_2 = \"\"\"I want the most cheapest computer. What do you recommend?\"\"\"\n    few_shot_assistant_2 = \"\"\" \n    [{'category': 'Computers and Laptops', \\\n'products': ['TechPro Ultrabook', 'BlueWave Gaming Laptop', 'PowerLite Convertible', 'TechPro Desktop', 'BlueWave Chromebook']}]\n    \"\"\"\n\n    messages = [\n        {'role': 'system', 'content': system_message},\n        {'role': 'user', 'content': f\"{delimiter}{few_shot_user_1}{delimiter}\"},\n        {'role': 'assistant', 'content': few_shot_assistant_1},\n        {'role': 'user', 'content': f\"{delimiter}{few_shot_user_2}{delimiter}\"},\n        {'role': 'assistant', 'content': few_shot_assistant_2},\n        {'role': 'user', 'content': f\"{delimiter}{user_input}{delimiter}\"},\n    ]\n    return get_completion_from_messages(messages)\n\n```\n:::\n\n\n# Evaluate Modified Prompt \n\n## Evaluation 3 (V2)\n\nEvaluate the modified prompt on the hard tests cases\n\n::: {#4a81d349 .cell output-location='fragment' execution_count=11}\n``` {.python .cell-code}\ncustomer_msg_3 = f\"\"\"\ntell me about the smartx pro phone and the fotosnap camera, the dslr one.\nAlso, what TVs do you have?\"\"\"\n\nproducts_by_category_3 = find_category_and_product_v2(customer_msg_3,\n                                                      products_and_category)\nprint(products_by_category_3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n \n    [{'category': 'Smartphones and Accessories', 'products': ['SmartX ProPhone']}, {'category': 'Cameras and Camcorders', 'products': ['FotoSnap DSLR Camera']}, {'category': 'Televisions and Home Theater Systems', 'products': ['CineView 4K TV', 'SoundMax Home Theater', 'CineView 8K TV', 'SoundMax Soundbar', 'CineView OLED TV']}]\n```\n:::\n:::\n\n\n# Regression Testing\n\nVerify that the model still works on previous test cases\n\n## Test\n\nCheck that modifying the model to fix the hard test cases does not negatively affect its performance on previous test cases.\n\n::: {#a3f31ac6 .cell output-location='fragment' execution_count=12}\n``` {.python .cell-code}\ncustomer_msg_0 = f\"\"\"Which TV can I buy if I'm on a budget?\"\"\"\n\nproducts_by_category_0 = find_category_and_product_v2(customer_msg_0,\n                                                      products_and_category)\nprint(products_by_category_0)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n \n    [{'category': 'Televisions and Home Theater Systems', 'products': ['CineView 4K TV', 'SoundMax Home Theater', 'CineView 8K TV', 'SoundMax Soundbar', 'CineView OLED TV']}]\n    \n```\n:::\n:::\n\n\n# Automated Testing with Development Set\n\n## Gather development set {.smaller}\n\nGather development set for automated testin\n\n::: {#4a159702 .cell execution_count=13}\n``` {.python .cell-code}\nmsg_ideal_pairs_set = [\n\n    # eg 0\n    {'customer_msg': \"\"\"Which TV can I buy if I'm on a budget?\"\"\",\n     'ideal_answer': {\n         'Televisions and Home Theater Systems': set(\n             ['CineView 4K TV', 'SoundMax Home Theater', 'CineView 8K TV',\n              'SoundMax Soundbar', 'CineView OLED TV']\n         )}\n     },\n\n    # eg 1\n    {'customer_msg': \"\"\"I need a charger for my smartphone\"\"\",\n     'ideal_answer': {\n         'Smartphones and Accessories': set(\n             ['MobiTech PowerCase', 'MobiTech Wireless Charger', 'SmartX EarBuds']\n         )}\n     },\n    # eg 2\n    {'customer_msg': f\"\"\"What computers do you have?\"\"\",\n     'ideal_answer': {\n         'Computers and Laptops': set(\n             ['TechPro Ultrabook', 'BlueWave Gaming Laptop', 'PowerLite Convertible', 'TechPro Desktop', 'BlueWave Chromebook'\n              ])\n     }\n     },\n\n    # eg 3\n    {'customer_msg': f\"\"\"tell me about the smartx pro phone and \\\n    the fotosnap camera, the dslr one.\\\n    Also, what TVs do you have?\"\"\",\n     'ideal_answer': {\n         'Smartphones and Accessories': set(\n             ['SmartX ProPhone']),\n         'Cameras and Camcorders':set(\n             ['FotoSnap DSLR Camera']),\n         'Televisions and Home Theater Systems':set(\n             ['CineView 4K TV', 'SoundMax Home Theater', 'CineView 8K TV', 'SoundMax Soundbar', 'CineView OLED TV'])\n     }\n     },\n\n    # eg 4\n    {'customer_msg': \"\"\"tell me about the CineView TV, the 8K one, Gamesphere console, the X one.\nI'm on a budget, what computers do you have?\"\"\",\n     'ideal_answer': {\n         'Televisions and Home Theater Systems': set(\n             ['CineView 8K TV']),\n         'Gaming Consoles and Accessories':set(\n             ['GameSphere X']),\n         'Computers and Laptops':set(\n             ['TechPro Ultrabook', 'BlueWave Gaming Laptop', 'PowerLite Convertible', 'TechPro Desktop', 'BlueWave Chromebook'])\n     }\n     },\n\n    # eg 5\n    {'customer_msg': f\"\"\"What smartphones do you have?\"\"\",\n     'ideal_answer': {\n         'Smartphones and Accessories': set(\n             ['SmartX ProPhone', 'MobiTech PowerCase', 'SmartX MiniPhone', 'MobiTech Wireless Charger', 'SmartX EarBuds'\n              ])\n     }\n     },\n    # eg 6\n    {'customer_msg': f\"\"\"I'm on a budget.  Can you recommend some smartphones to me?\"\"\",\n     'ideal_answer': {\n         'Smartphones and Accessories': set(\n             ['SmartX EarBuds', 'SmartX MiniPhone', 'MobiTech PowerCase',\n              'SmartX ProPhone', 'MobiTech Wireless Charger']\n         )}\n     },\n\n    # eg 7 # this will output a subset of the ideal answer\n    {'customer_msg': f\"\"\"What Gaming consoles would be good for my friend who is into racing games?\"\"\",\n     'ideal_answer': {\n         'Gaming Consoles and Accessories': set([\n             'GameSphere X',\n             'ProGamer Controller',\n             'GameSphere Y',\n             'ProGamer Racing Wheel',\n             'GameSphere VR Headset'\n         ])}\n     },\n    # eg 8\n    {'customer_msg': f\"\"\"What could be a good present for my videographer friend?\"\"\",\n     'ideal_answer': {\n         'Cameras and Camcorders': set([\n             'FotoSnap DSLR Camera', 'ActionCam 4K', 'FotoSnap Mirrorless Camera', 'ZoomMaster Camcorder', 'FotoSnap Instant Camera'\n         ])}\n     },\n\n    # eg 9\n    {'customer_msg': f\"\"\"I would like a hot tub time machine.\"\"\",\n     'ideal_answer': []\n     }\n\n]\n```\n:::\n\n\n## Evaluate test cases {.smaller}\n\nEvaluate test cases by comparing to the ideal answers\n\n::: {#46a27ece .cell execution_count=14}\n``` {.python .cell-code}\ndef eval_response_with_ideal(response,\n                             ideal,\n                             debug=False):\n\n    if debug:\n        print(\"response\")\n        print(response)\n\n    # json.loads() expects double quotes, not single quotes\n    json_like_str = response.replace(\"'\", '\"')\n\n    # parse into a list of dictionaries\n    l_of_d = json.loads(json_like_str)\n\n    # special case when response is empty list\n    if l_of_d == [] and ideal == []:\n        return 1\n\n    # otherwise, response is empty\n    # or ideal should be empty, there's a mismatch\n    elif l_of_d == [] or ideal == []:\n        return 0\n\n    correct = 0\n\n    if debug:\n        print(\"l_of_d is\")\n        print(l_of_d)\n    for d in l_of_d:\n\n        cat = d.get('category')\n        prod_l = d.get('products')\n        if cat and prod_l:\n            # convert list to set for comparison\n            prod_set = set(prod_l)\n            # get ideal set of products\n            ideal_cat = ideal.get(cat)\n            if ideal_cat:\n                prod_set_ideal = set(ideal.get(cat))\n            else:\n                if debug:\n                    print(f\"did not find category {cat} in ideal\")\n                    print(f\"ideal: {ideal}\")\n                continue\n\n            if debug:\n                print(\"prod_set\\n\", prod_set)\n                print()\n                print(\"prod_set_ideal\\n\", prod_set_ideal)\n\n            if prod_set == prod_set_ideal:\n                if debug:\n                    print(\"correct\")\n                correct += 1\n            else:\n                print(\"incorrect\")\n                print(f\"prod_set: {prod_set}\")\n                print(f\"prod_set_ideal: {prod_set_ideal}\")\n                if prod_set <= prod_set_ideal:\n                    print(\"response is a subset of the ideal answer\")\n                elif prod_set >= prod_set_ideal:\n                    print(\"response is a superset of the ideal answer\")\n\n    # count correct over total number of items in list\n    pc_correct = correct / len(l_of_d)\n\n    return pc_correct\n\n```\n:::\n\n\n## Message and ideal answer\n\n::: {#faed95a4 .cell output-location='fragment' execution_count=15}\n``` {.python .cell-code}\nprint(f'Customer message: {msg_ideal_pairs_set[7][\"customer_msg\"]}')\nprint(f'Ideal answer: {msg_ideal_pairs_set[7][\"ideal_answer\"]}')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCustomer message: What Gaming consoles would be good for my friend who is into racing games?\nIdeal answer: {'Gaming Consoles and Accessories': {'GameSphere X', 'ProGamer Racing Wheel', 'GameSphere VR Headset', 'GameSphere Y', 'ProGamer Controller'}}\n```\n:::\n:::\n\n\n## Output \n\n::: {#1f0791fb .cell output-location='fragment' execution_count=16}\n``` {.python .cell-code}\nresponse = find_category_and_product_v2(msg_ideal_pairs_set[7][\"customer_msg\"],\n                                        products_and_category)\nprint(f'Resonse: {response}')\n\neval_response_with_ideal(response,\n                         msg_ideal_pairs_set[7][\"ideal_answer\"])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nResonse:  \n    [{'category': 'Gaming Consoles and Accessories', 'products': ['GameSphere X', 'ProGamer Controller', 'GameSphere Y', 'ProGamer Racing Wheel', 'GameSphere VR Headset']}]\n    \n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=16}\n```\n1.0\n```\n:::\n:::\n\n\n## Evaluate all test cases  {.smaller}\n\nRun evaluation on all test cases and calculate the fraction of cases that are correct\n\n::: {#dab8b8c8 .cell output-location='slide' execution_count=17}\n``` {.python .cell-code}\n# Note, this will not work if any of the api calls time out\nscore_accum = 0\nfor i, pair in enumerate(msg_ideal_pairs_set):\n    print(f\"example {i}\")\n\n    customer_msg = pair['customer_msg']\n    ideal = pair['ideal_answer']\n\n    # print(\"Customer message\",customer_msg)\n    # print(\"ideal:\",ideal)\n    response = find_category_and_product_v2(customer_msg,\n                                            products_and_category)\n\n    # print(\"products_by_category\",products_by_category)\n    score = eval_response_with_ideal(response, ideal, debug=False)\n    print(f\"{i}: {score}\")\n    score_accum += score\n\n\nn_examples = len(msg_ideal_pairs_set)\nfraction_correct = score_accum / n_examples\nprint(f\"Fraction correct out of {n_examples}: {fraction_correct}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nexample 0\n0: 1.0\nexample 1\nincorrect\nprod_set: {'SmartX ProPhone', 'SmartX MiniPhone', 'SmartX EarBuds', 'MobiTech PowerCase', 'MobiTech Wireless Charger'}\nprod_set_ideal: {'MobiTech Wireless Charger', 'SmartX EarBuds', 'MobiTech PowerCase'}\nresponse is a superset of the ideal answer\n1: 0.0\nexample 2\n2: 1.0\nexample 3\n3: 1.0\nexample 4\nincorrect\nprod_set: {'CineView 4K TV', 'SoundMax Home Theater', 'CineView OLED TV', 'SoundMax Soundbar', 'CineView 8K TV'}\nprod_set_ideal: {'CineView 8K TV'}\nresponse is a superset of the ideal answer\nincorrect\nprod_set: {'GameSphere X', 'ProGamer Racing Wheel', 'GameSphere VR Headset', 'GameSphere Y', 'ProGamer Controller'}\nprod_set_ideal: {'GameSphere X'}\nresponse is a superset of the ideal answer\n4: 0.3333333333333333\nexample 5\n5: 1.0\nexample 6\n6: 1.0\nexample 7\n7: 1.0\nexample 8\n8: 1.0\nexample 9\n9: 1\nFraction correct out of 10: 0.8333333333333334\n```\n:::\n:::\n\n\n",
    "supporting": [
      "evaluation_files"
    ],
    "filters": [],
    "includes": {}
  }
}