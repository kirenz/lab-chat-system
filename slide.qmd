---
title: "Slides"
number-sections: true
---

*The following tutorials are mainly based on an excellent course provided by Isa Fulford from OpenAI and Andrew Ng from DeepLearning.AI.*

For cost reasons we mainly use OpenAI's `gpt-3.5-turbo` model in our tutorials. However, you can simply replace `model="gpt-3.5-turbo"` with `model="gpt-4"` in the helper function. Note the [price difference](https://openai.com/pricing) between the two models.

::: {.callout-note appearance="simple"}
Take a look at the [slides tutorial](https://kirenz.github.io/lab-toolkit/slides/slides.html#/title-slide) to learn how to use all slide options 

:::


## Basics: Tokens and chat format

In this tutorial, you'll learn some basic properties of Large Language Models: Tokens and the chat format:

- [üñ•Ô∏è Basics](/slides/basics.qmd)

::: {.callout-tip appearance="simple" icon=false}
## Download files
- [Jupyter Notebook](/code/basics.ipynb)
:::

{{< embed /code/basics.ipynb >}}

## Classification 

Learn how to classify different customer queries:

- [üñ•Ô∏è Classification](/slides/classification.qmd)


::: {.callout-tip appearance="simple" icon=false}
## Download files
- [Jupyter Notebook](/code/classification.ipynb)
:::

## Moderation

The moderations endpoint is a tool you can use to check whether content complies with our usage policies:

- [üñ•Ô∏è Moderation](/slides/moderation.qmd)

::: {.callout-tip appearance="simple" icon=false}
## Download files
- [Jupyter Notebook](/code/moderation.ipynb)
:::

## Chain of Thought Reasoning

Chain-of-thought (CoT) prompting enables complex reasoning capabilities through intermediate reasoning steps. You can combine it with few-shot prompting to get better results on more complex tasks that require reasoning before responding:

- [üñ•Ô∏è Chain of Thought Reasoning](/slides/reasoning.qmd)

::: {.callout-tip appearance="simple" icon=false}
## Download files
- [Jupyter Notebook](/code/reasoning.ipynb)
:::

## Chaining Prompts

Prompt Chaining is a technique of connecting multiple tasks to generate complex content by breaking down a large generative task into smaller, more manageable pieces. Examples of prompt chaining are generating product descriptions, creating personalized email campaigns, and generating complex chatbot responses.

- [üñ•Ô∏è Chaining prompts](/slides/chaining.qmd)

::: {.callout-tip appearance="simple" icon=false}
## Download files
- [Jupyter Notebook](/code/chaining.ipynb)
:::

## Check Model Output 

Ask the model to verify its own outputs:

- [üñ•Ô∏è Output check](/slides/outputcheck.qmd)

::: {.callout-tip appearance="simple" icon=false}
## Download files
- [Jupyter Notebook](/code/outputcheck.ipynb)
:::

## Build an End-to-End System

This puts together the chain of prompts that you saw throughout the tutorials:

- [üñ•Ô∏è End-to-end system](/slides/system.qmd)

::: {.callout-tip appearance="simple" icon=false}
## Download files
- [Jupyter Notebook](/code/system.ipynb)
- [products.json](/slides/products.json)
- [utils.py](/slides/utils.py)
:::

You need to download the following files:



## Evaluation

Evaluate LLM responses when there is a single "right answer".

- [üñ•Ô∏è Evaluate your system](/slides/evaluation.qmd)

::: {.callout-tip appearance="simple" icon=false}
## Download files
- [Jupyter Notebook](/code/evaluation.ipynb)
- [products.json](/slides/products.json)
- [utils.py](/slides/utils_2.py)
:::

## Evaluation Part 2

Evaluate LLM responses where there isn't a single "right answer."

- [üñ•Ô∏è Evaluate your system, part 2](/slides/evaluation_2.qmd)

::: {.callout-tip appearance="simple" icon=false}
## Download files
- [Jupyter Notebook](/code/evaluation_2.ipynb)
:::